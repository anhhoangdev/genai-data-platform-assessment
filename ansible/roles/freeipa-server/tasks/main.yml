---
- name: Install FreeIPA server packages
  apt:
    name:
      - freeipa-server
      - freeipa-server-dns
      - chrony
    state: present
    update_cache: true

- name: Ensure hostname and hosts entry
  hostname:
    name: "{{ ipa_hostname }}.{{ ipa_domain }}"

- name: Disable IPA DNS (Cloud DNS authoritative) - ensure install opts reflect
  set_fact:
    ipa_install_opts: "--realm {{ ipa_realm }} --domain {{ ipa_domain }} --hostname {{ ipa_hostname }}.{{ ipa_domain }} --no-dns --no-ntp -U"

- name: Discover GCP project ID via metadata
  shell: |
    curl -s -H "Metadata-Flavor: Google" http://metadata/computeMetadata/v1/project/project-id
  register: gcp_project
  changed_when: false

- name: Fetch FreeIPA admin password from Secret Manager
  shell: |
    TOKEN=$(curl -s -H "Metadata-Flavor: Google" http://metadata/computeMetadata/v1/instance/service-accounts/default/token | jq -r .access_token)
    curl -s -H "Authorization: Bearer $TOKEN" "https://secretmanager.googleapis.com/v1/projects/{{ gcp_project.stdout }}/secrets/freeipa_admin_password/versions/latest:access" | jq -r .payload.data | base64 -d
  args:
    executable: /bin/bash
  register: ipa_admin_password
  changed_when: false

- name: Run ipa-server-install non-interactively if not already configured
  shell: |
    set -euo pipefail
    if ! systemctl is-active --quiet ipa; then
      echo "{{ ipa_admin_password.stdout }}" > /root/ipa_admin_password
      ipa-server-install {{ ipa_install_opts }} -a "{{ ipa_admin_password.stdout }}" -p "{{ ipa_admin_password.stdout }}"
    fi
  args:
    executable: /bin/bash



- name: Set fact for GCP project ID
  set_fact:
    gcp_project_id: "{{ gcp_project.stdout }}"
  when: gcp_project is defined

- name: Ensure ipa CLI available
  command: which ipa
  changed_when: false

- name: Check if enroll user exists
  command: ipa user-show enroll
  register: enroll_user
  failed_when: enroll_user.rc not in [0,1]
  changed_when: false

- name: Create enroll user when missing
  command: ipa user-add enroll --first=Enroll --last=User --random
  when: enroll_user.rc == 1

# Generate or rotate a TOTP token for 'enroll'
- name: Create TOTP for enroll
  command: ipa otptoken-add --owner=enroll --type=totp --token-notes="ansible-rotated"
  register: otp_create
  changed_when: true

# Extract secret and store as a new Secret Manager version
- name: Store OTP secret in Secret Manager
  shell: |
    set -e
    SECRET=$(echo "{{ otp_create.stdout }}" | sed -n 's/^ *Secret: *//p' | tr -d '\r')
    [[ -n "$SECRET" ]]
    printf "%s" "$SECRET" | gcloud secrets versions add ipa_enrollment_otp --data-file=-
  environment:
    CLOUDSDK_CORE_PROJECT: "{{ gcp_project_id }}"
  args:
    executable: /bin/bash

